import 'dart:collection';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import '../models/scenario.dart';
import '../services/relay_service.dart';
import 'device_provider.dart';  // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç DeviceProvider

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á—É
Map<K, List<T>> groupBy<T, K>(Iterable<T> items, K Function(T) key) {
  final map = <K, List<T>>{};
  for (final item in items) {
    final k = key(item);
    (map[k] ??= []).add(item);
  }
  return map;
}

class ScenarioProvider with ChangeNotifier {
  final RelayService _relayService = RelayService();
  final List<Scenario> _scenarios = [];
  bool _isLoading = false;
  String? _error;
  final Uuid _uuid = const Uuid();
  List<String> _executionLog = [];
  DeviceProvider? _deviceProvider;  // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ deviceProvider
  
  // –ì–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä –¥–ª—è deviceProvider
  DeviceProvider? get deviceProvider => _deviceProvider;
  set deviceProvider(DeviceProvider? value) {
    _deviceProvider = value;
    notifyListeners();
  }

  ScenarioProvider() {
    _loadScenarios();
  }

  UnmodifiableListView<Scenario> get scenarios =>
      UnmodifiableListView(_scenarios);
  bool get isLoading => _isLoading;
  String? get error => _error;
  List<String> get executionLog => _executionLog;

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ SharedPreferences
  Future<void> _loadScenarios() async {
    setLoading(true);
    try {
      final prefs = await SharedPreferences.getInstance();
      final scenariosJson = prefs.getStringList('scenarios') ?? [];

      if (scenariosJson.isNotEmpty) {
        _scenarios.clear();
        for (final json in scenariosJson) {
          try {
            final Map<String, dynamic> scenarioMap = jsonDecode(json);
            final scenario = Scenario.fromJson(scenarioMap);
            _scenarios.add(scenario);
          } catch (e) {
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
          }
        }
      }
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: $e');
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: $e');
    } finally {
      setLoading(false);
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ SharedPreferences
  Future<void> _saveScenarios() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final scenariosJson =
          _scenarios.map((scenario) => jsonEncode(scenario.toJson())).toList();

      await prefs.setStringList('scenarios', scenariosJson);
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: $e');
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
  void setError(String? error) {
    _error = error;
    notifyListeners();
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
  Future<void> addScenario(Scenario scenario) async {
    setLoading(true);

    try {
      // –ï—Å–ª–∏ ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
      final newScenario =
          scenario.id.isEmpty || scenario.id.trim().isEmpty
              ? Scenario(
                id: _uuid.v4(),
                name: scenario.name,
                description: scenario.description,
                actions: scenario.actions,
                isActive: scenario.isActive,
                color: scenario.color,
                iconCodePoint: scenario.iconCodePoint,
                iconFontFamily: scenario.iconFontFamily,
              )
              : scenario;

      _scenarios.add(newScenario);
      await _saveScenarios();
      notifyListeners();
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
    } finally {
      setLoading(false);
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
  Future<void> updateScenario(Scenario updatedScenario) async {
    setLoading(true);

    try {
      final index = _scenarios.indexWhere((s) => s.id == updatedScenario.id);

      if (index >= 0) {
        _scenarios[index] = updatedScenario;
        await _saveScenarios();
        notifyListeners();
      } else {
        setError('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
    } finally {
      setLoading(false);
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
  Future<void> deleteScenario(String id) async {
    setLoading(true);

    try {
      _scenarios.removeWhere((s) => s.id == id);
      await _saveScenarios();
      notifyListeners();
    } catch (e) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
    } finally {
      setLoading(false);
    }
  }

  /// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
  Future<void> toggleScenarioActive(String id) async {
    final index = _scenarios.indexWhere((s) => s.id == id);

    if (index >= 0) {
      final scenario = _scenarios[index];
      final updatedScenario = scenario.copyWith(isActive: !scenario.isActive);

      await updateScenario(updatedScenario);
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
  Future<bool> executeScenario(String id) async {
    setLoading(true);
    setError(null);
    _executionLog = []; // –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

    try {
      final index = _scenarios.indexWhere((s) => s.id == id);

      if (index < 0) {
        setError('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        _executionLog.add('üî¥ –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      final scenario = _scenarios[index];
      _executionLog.add('üîµ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}');

      if (!scenario.isActive) {
        setError('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–∫–ª—é—á–µ–Ω');
        _executionLog.add('üî¥ –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–∫–ª—é—á–µ–Ω');
        return false;
      }

      if (scenario.actions.isEmpty) {
        setError('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π');
        _executionLog.add('üî¥ –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      final activeActions = scenario.actions.where((a) => a.isActive).toList();
      if (activeActions.isEmpty) {
        setError('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π');
        _executionLog.add('üî¥ –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π');
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
      _scenarios[index] = scenario.copyWith(lastRun: DateTime.now());
      await _saveScenarios();
      notifyListeners();

      int successActions = 0;
      int failedActions = 0;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      final deviceGroups = groupBy(activeActions, (action) => action.deviceIp);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Future.wait(
        deviceGroups.entries.map((entry) async {
          final deviceIp = entry.key;
          final actions = entry.value;

          try {
            _executionLog.add(
              'üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${actions.first.deviceName}',
            );

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ –µ–¥–∏–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            final result = await _relayService.runScenarioOnDevice(
              deviceIp,
              actions,
            );

            if (result) {
              successActions += actions.length;
              _executionLog.add(
                '‚úÖ –î–µ–π—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ ${actions.first.deviceName}',
              );
            } else {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ —Å—Ü–µ–Ω–∞—Ä–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
              for (final action in actions) {
                try {
                  if (action.delay != null) {
                    _executionLog.add(
                      '‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${_formatDuration(action.delay!)}',
                    );
                    await Future.delayed(action.delay!);
                  }

                  await _relayService.toggleRelayToState(
                    action.deviceIp,
                    action.relayId,
                    action.turnOn,
                  );

                  _executionLog.add(
                    '‚úÖ –î–µ–π—Å—Ç–≤–∏–µ "${action.relayName}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                  );
                  successActions++;
                } catch (e) {
                  _executionLog.add(
                    '‚ùå –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "${action.relayName}": $e',
                  );
                  failedActions++;
                }
              }
            }
          } catch (e) {
            _executionLog.add(
              '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${actions.first.deviceName}: $e',
            );
            failedActions += actions.length;
          }
        }),
      );

      final totalActions = activeActions.length;
      _executionLog.add(
        'üìä –ò—Ç–æ–≥–∏: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ $successActions –∏–∑ $totalActions –¥–µ–π—Å—Ç–≤–∏–π',
      );

      if (failedActions > 0) {
        if (successActions == 0) {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ');
          return false;
        }
        setError('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
      }

      return successActions > 0;
    } catch (e) {
      _executionLog.add('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: $e');
      return false;
    } finally {
      setLoading(false);
    }
  }


  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  List<String> getExecutionLog() {
    return List.from(_executionLog);
  }

  /// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  void clearExecutionLog() {
    _executionLog.clear();
    notifyListeners();
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  String _formatDuration(Duration duration) {
    if (duration.inSeconds < 60) {
      return "${duration.inSeconds} —Å–µ–∫.";
    } else {
      return "${duration.inMinutes} –º–∏–Ω. ${duration.inSeconds % 60} —Å–µ–∫.";
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ ID
  Scenario? getScenarioById(String id) {
    final index = _scenarios.indexWhere((s) => s.id == id);
    return index >= 0 ? _scenarios[index] : null;
  }

  /// –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏
  void clearError() {
    if (_error != null) {
      _error = null;
      notifyListeners();
    }
  }
}
